# -*- coding: utf-8 -*-
"""Data Process.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IUQd5_DzJzGrKvUJwiQOCJy8upaXq3hr

## This file is for data processing.
"""

import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
import sys


# read downloaded data from csv
fname = sys.argv[1]
data = pd.read_csv(fname,
    usecols=[' Date__(UT)__HR:MN', ' R.A._(ICRF)', ' DEC_(ICRF)'])

data.columns = ['YYYY-Mon-Day', 'RA', 'DEC']
data.head()

####################################
### Functions for Data Processing###
####################################

# This function unifies the unit of RA and DEC to be arc degrees. 
# Original units: RA  in hours-minutes-seconds of time,    HH MM SS.ff{ffff};
#                 DEC in degrees-minutes-seconds of arc,  sDD MN SC.f{ffff}.
# Inputs: s is a string, col specifies the column is "RA" or "DEC".
def change_unit(s, col): 
    num = float(s)
    hr = int(num/10000)
    min = int(num/100) - hr * 100
    sec = num - hr * 10000 - min * 100
    total_sec = hr * 3600 + min * 60 + sec
    if col == "RA":
        return total_sec * 15 / 3600 # 1 second of time = 15 seconds of arc
    return total_sec / 3600

# This function calculates the distance between lunar locations every 24 hours,
# which is also the daily average speed of lunar motion by definition.
#
# Inputs: the coordinates of observed moon locations (RA, DEC)
# Output: the straight line distance by Pythagoras (unit in arc seconds)
def parts(x, y):
    n = len(x)
    difx = np.zeros(n)
    dify = np.zeros(n)
    parts = np.zeros(n) 
    for i in range (n-1):
        difx[i] = (x[i+1] - x[i]) % 360
        dify[i] = y[i+1] - y[i]
        parts[i] = math.sqrt(difx[i]**2 + dify[i]**2)
        #parts[i] = difx #or only longtitude difference?
    return difx, dify, parts

# This function calcualtes the 'Rate' based on the input 'Parts' and also 
# calculates the Rate of lessening or increase. 
def rate(x):
    n=len(x)
    y=np.zeros(n)
    for i in range (n-1):
        y[i]=x[i+1]-x[i]
    return y

# This function calculates the cumulative RLI based on RLI 
# Input: RLI ---- Rate of lessening or increase 
# Output: CRLI ---- Cumulative Rate of lessening or increase 
def crli(rli):
    n = len(rli)
    y = np.zeros(n)
    for i in range(1, n):
        y[i] = y[i-1] + rli[i-1]
    return y

# This function employs all the helper functions above on the input dataframe 
# and outputs the new dataframe.
def data_process(data):
    # data["RA"] = data["RA"].apply(lambda x: change_unit(x, "RA"))
    # data["DEC"] = data["DEC"].apply(lambda x: change_unit(x, "DEC"))
    data['dRA'], data['dDEC'], data['Parts'] = parts(data['RA'], data["DEC"])
    data['Rate']=rate(data['Parts'])
    mean_pt=np.mean(data['Parts'])
    data['RLI']=data['Parts']-mean_pt
    data['CRLI'] = crli(data['RLI'])
    return data

aa = data_process(data)
aa.to_csv (f'data_{fname}.csv',  index = False, header=True)

